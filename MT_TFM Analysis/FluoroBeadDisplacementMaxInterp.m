%% update 2020-02-04: Superseded by ExtractBeadCoordinatesEpiMaxInterp.m v.2020-02-04 , ExtractBeadMaxDisplacementEPIGrid.m v.2020-02-06
%%
% Written by Waddah Moghram on (v.2019-02-07)
% This script identifies the bead that has displaced the most (beadID)
% It also identifes how much that displacement was and at what frame
% You can use this for any field generated by TFM package (e.g., displacement field, force field, etc.)

% v1.00

% this version will use the interpolate displacements instead of the displacements at individual points.

bandSize = 0;
FirstFrame = 1;


if ~exist('MagnificationTimes', 'var')
% if ~exist('MagnificationTimes', 'var'), MagnificationTimes = []; end
% if nargin < 6 || isempty(MagnificationTimes)
    MagnificationTimes = 30;                % Default value of 30X
end

NumFrames = numel(displField);
MaxFrameNumber = 0;
MaxDisplFieldIndex = 0;

LastFrame = NumFrames;
FrameSeq = FirstFrame:NumFrames;
% % # of cycles
% cycles = 7;


% displFieldNetMaxPointInFrame = 0;
displFieldNetMaxPointInFrame = zeros(numel(FrameSeq),1);
tmpMaxDisplFieldNetInFrame = 0;
tmpMaxDisplFieldInFrameIndex = 0;

[ScaleMicronPerPixel, ~] = MagnificationScalesMicronPerPixel(MagnificationTimes);  

    %% 2. Covnert only displacements (.vec) to microns. Keep Starting positions in pixels. Keep the same structure
    for CurrentFrame = 1:size(displField,2)
          tmpField = displField(CurrentFrame).vec;
          displField(CurrentFrame).pos = displField.pos;             % pixels
          displField(CurrentFrame).vec = tmpField * ScaleMicronPerPixel;      
    end

  %% ==================================================================================
    dMap = cell(1,numel(displField));
    dMapX = cell(1,numel(displField));
    dMapY = cell(1,numel(displField));
    
        %% ==================================================================================
    % account for if displField contains more than one frame. Make sure you add "createRegGridFromDisplField.m" in the search path.
    [reg_grid,~,~,~] = createRegGridFromDisplField(displField(1), 2); %2=2 times fine interpolation

        %% ==================================================================================
    reverseString = '';
for CurrentFrame = FrameSeq
%         if ~mod(CurrentFrame, 20)  || CurrentFrame == 1       % Output every 20 frames so that it works faster.
        ProgressMsg = sprintf('\nCreating Frame #%d/%d...\n',CurrentFrame, LastFrame);
        fprintf([reverseString, ProgressMsg]);
        reverseString = repmat(sprintf('\b'), 1, length(ProgressMsg));
%         end

   %-----------------------------------------------------------------------------------------------
    [grid_mat, interpGridVector,~,~] = interp_vec2grid(displField(CurrentFrame).pos(:,1:2), displField(CurrentFrame).vec(:,1:2) ,[], reg_grid);
        %-----------------------------------------------------------------------------------------------
    grid_spacingX = grid_mat(1,2,1)- grid_mat(1,1,1);
    grid_spacingY = grid_mat(2,1,2)- grid_mat(1,1,2);        
    imSizeX = (grid_mat(end,end,1) - grid_mat(1,1,1)) + grid_spacingX;
    imSizeY = (grid_mat(end,end,2) - grid_mat(1,1,2)) + grid_spacingY; 
    
    width = imSizeX;
    height = imSizeY;

        %-----------------------------------------------------------------------------------------------        
    centerX = ((grid_mat(end,end,1) + grid_mat(1,1,1))/2);
    centerY = ((grid_mat(end,end,2) + grid_mat(1,1,2))/2);
    % [XI,YI] = meshgrid(grid_mat(1,1,1):grid_mat(1,1,1)+imSizeX,grid_mat(1,1,2):grid_mat(1,1,2)+imSizeY);
    Xmin = centerX - width/2 + bandSize;
    Xmax = centerX + width/2 - bandSize;
    Ymin = centerY - height/2 + bandSize;
    Ymax = centerY + height/2 - bandSize;
    [XI,YI] = meshgrid(Xmin:Xmax,Ymin:Ymax);

    %-----------------------------------------------------------------------------------------------            
    % Added by WIM on 2/5/2019
    displNorm = (interpGridVector(:,:,1).^2 + interpGridVector(:,:,2).^2).^0.5;
    dMap{CurrentFrame} = displNorm;
    dMapX{CurrentFrame} = interpGridVector(:,:,1);
    dMapY{CurrentFrame} = interpGridVector(:,:,2);

    %-----------------------------------------------------------------------------------------------            
    displHeatMap = griddata(grid_mat(:,:,1),grid_mat(:,:,2), displNorm ,XI, YI,'cubic'); 
%     displHeatMapReshaped = reshape(displHeatMap, [numel(displHeatMap), 1]);
%     [tmpMaxDisplFieldNetInFrame,tmpMaxDisplFieldInFrameIndex] = max(displHeatMapReshaped);
    %-----------------------------------------------------------------------------------------------            
%     NetdisplFieldAllPointsInFrame = vecnorm(displHeatMap,2,2);
%     [tmpMaxDisplFieldNetInFrame,tmpMaxDisplFieldInFrameIndex] =  max(NetdisplFieldAllPointsInFrame);          % maximum item in a column
%     
    if tmpMaxDisplFieldNetInFrame > displFieldNetMaxPointInFrame
        displFieldNetMaxPointInFrame(CurrentFrame) = tmpMaxDisplFieldNetInFrame;
        displFieldMaxPosFrame = displField(CurrentFrame).pos; 
        displFieldMaxVecFrame = displField(CurrentFrame).vec;
        MaxDisplFieldIndex = tmpMaxDisplFieldInFrameIndex;
        MaxFrameNumber = CurrentFrame;
    end 
end
fprintf('Maximum Net Displacement = %g Microns at ', displFieldNetMaxPointInFrame(MaxFrameNumber));
fprintf('[x,y] = [%g, %g] pixels. \n\t in Frame #%d, Point Index #%d \n', displFieldMaxPosFrame(MaxDisplFieldIndex, 1), displFieldMaxPosFrame(MaxDisplFieldIndex, 2), MaxFrameNumber, MaxDisplFieldIndex)
fprintf('Maximum displacement [disp_x, disp_h] =  [%f, %f] pixels or net displacement [disp_net] = [%f] pixels. \n',  displFieldMaxVecFrame(MaxDisplFieldIndex, 1), displFieldMaxVecFrame(MaxDisplFieldIndex, 2) , displFieldNetMaxPointInFrame(MaxFrameNumber))


%% Converting to microns

%% 2. Covnert only displacements (.vec) to microns. Keep Starting positions in pixels. Keep the same structure
    for CurrentFrame = 1:size(displField,2)
          tmpField = displField(CurrentFrame).vec;
          displField(CurrentFrame).pos = displField.pos;             % pixels
          displField(CurrentFrame).vec = tmpField * ScaleMicronPerPixel;      
    end
    maxDisplacementMicron = maxDisplacement * ScaleMicronPerPixel; 
    fprintf('Maximum displacement is %g microns, based on tracked points. \n', maxDisplacementMicron);  
        
  