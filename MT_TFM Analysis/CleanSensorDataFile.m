%%**** NEEDS UPDATE so that if SensorData is left blank, but the filename is given, then open the sensor data file directly from here************
%********** TO DO **** CHECK the array 1:EveryNthFrame:size(CleanSensorDataTmp,1) **** in line 99. WIM 2019-05-29
%% 
    %{
    v.2021-08-01 by Waddah Moghram.
        1. Modified for AIM 3 experiments.
        2. Modified to reflect that the first column of sensor data is no longer datapoint index, but AO (V) input signal.
    v.2020-07-04 by Waddah Moghram
        1. Replaced output with "CleanedSensorDataFullFileNameMAT" instead of the *.dat file.
        2. Modified the output so that HeaderData and HeaderTitle is given if SensorDat is given as well as the sensor data file name
    v.2019-10-07..09
        1. Fixed compatibility error with Sync Data, and TimestampRTfromSensorData
        2. Added SamplingRate as part of the output and save *.MAT file

    v2019-06-16
        1. Added an output variable that will give you the index of the first pulse

    v2019-06-13 Updated by Waddah Moghram on 2019-06-13
        1. Updated the output to include HeaderData, HeaderTitle

    v7.20 Updated by Waddah Moghram on 2019-06-09
        1. Added a *.mat file to save the data for quicker access and for quicker viewing and plots.
    v7.10 Written by Waddah Moghram on 2019-05-28

    v.7.00 
    Written by Waddah Moghram, Ph.D. candidate at the University of Iowa on 5/19/2019
        Updates v7.00
    1. Added another argument so that I can select Every Nth Picture/Pulse
    2. HeaderLinesCount was removed. Must use "ReadSensorData.m" first.
    
    Average over the entire segment of the pulse. 
    
    INCOMPLETE 4/28/2018
        1. this function takes as an input SensorData as output by ReadSensorDataFile_v_5_0.m
        Typically it will be invoked by plotForceDisplacement_V_5_0.m, but it can be invoked directly.

        2. It only filters the datapoints in Sensor Data that correspond to camera exposure signals (TTL Pulses of 3.0 V or higher)
        Added Exposure TTL Pulse Counter on 1/24/2018. Based on some experiments, this is more than the number of image frames, but never less. 
        Only the first index of the pulse is stored to represent the pulse that encompases normally 10 samples
        *** The rest of the sensor values (flux, current and exposure) are averaged out and replaced as a single point ***

        Update

    Written by Waddah Moghram, PhD Candindate in Biomedical Engineering, updated on 4/24/2018
    Intput are SensorDataFile, and the number of header lines
        Check the outline of the header below.

    Output are the SensorData, HeaderData & HeaderTitle. (For the v8.0 and later)
        CleanSensorDataPoint: 
        Pulse Counts
    Older Version 
        CleanSensorDataFile_v_4_0 Overview. Written by Waddah Moghram, PhD Candindate in Biomedical Engineering, on 1/18/2018 and thereafter
        this function takes as an input SensorData as output by ReadSensorDataFile_v_4_0.m
        typically it will be invoked by plotForceDisplacement_V_4_0.m
        It only filters the datapoints in Sensor Data that correspond to camera exposure signals (TTL Pulses of 3.0 V or higher)
        Added Exposure TTL Pulse Counter on 1/24/2018. Based on some experiments, this is more than the number of image frames, but never less. 
        Only the first index of the pulse is stored to represent the pulse that encompases normally 10 samples
        *** The rest of the sensor values (flux, current and exposure) are averaged out and replaced as a single point ***

        CleanFluxDataFile_v_1_0 Summary of this function goes through the
        SensorData and filters those that have Exposure On. It averages out the
        sensor values during exposure, except for the data point ID# that is kept
        at first wave of the pulse
        The input for this program is entered from ReadSensorDataFile_v_1_0.m
        Programmed by Waddah Moghram, PhD Candindate in Biomedical Engineering on
         10/4/2017

    Future Release:
        Have all sensor data output neatly in *.mat file including the header data.
    %}

function [CleanedSensorData , ExposurePulseCount, EveryNthFrame, CleanedSensorDataFullFileNameMAT, HeaderData, HeaderTitle, FirstExposurePulseDatapointNumber] = CleanSensorDataFile(SensorData, EveryNthFrame, SensorDataFullFilename, SamplingRate, HeaderData, HeaderTitle, SensorDataColumns)
%% =========== 1. Initialize a new CleanData Points Matrix, and other variables, display initial status to user
    disp('-------------------------- Running "CleanSensorDataFile.m" to read Sensor Data generated by LabVIEW data logger --------------------------')
    CleanSensorDataTmp = [];                   
    CurrentDataPoint = [];
    CleanSensorDataPointAppended = false;
%     HeaderData = [];
%     HeaderTitle = [];
    ExposurePulseCount = 0;    
    FirstExposurePulseDatapointNumber = 0;
    
    CameraExposureCutoffHigh = 3;                       % Camera Exposure (>3V).
    CameraExposureCutoffLow = 0.1;                      % No Camera Exposure (~ 0V). 
    
    if ~exist('SensorData','var'), SensorData = []; end
    if nargin < 1 || isempty(SensorData)
        [SensorData, HeaderData, HeaderTitle, SensorDataFullFilename, ~, ~, SamplingRate]  = ReadSensorDataFile([], 0, [], [], [], []);            
        CleanedSensorDataFullFileNameDAT = [];
        CleanedSensorDataFullFileNameMAT = [];
    end
    
    if ~exist('EveryNthFrame','var'), EveryNthFrame = []; end
    if nargin < 2 || isempty(EveryNthFrame)
        EveryNthFrame = input('Was the video file accompanying the sensor data file reduced to every Nth frame? If so, [Default = No frame reduction, or N = 1] N = ? ');
        if isempty(EveryNthFrame) || ~isnumeric(EveryNthFrame)
            EveryNthFrame = 1; 
        end    
    end
%     
    if ~exist('SensorDataFullFilename','var'), SensorDataFullFilename = []; end
    if ~(nargin < 3 || isempty(SensorDataFullFilename))
        % do nothing
    else
        [HeaderData, HeaderTitle] = ReadSensorDataFileHeaderOnly(SensorDataFullFilename);
        % find data header
    end
    disp('----------------------------------------------------------------------------')      
    disp('Cleaning up to keep sensors data points that have camera exposure...in Progress')
    
    
    if ~exist('SamplingRate','var'), SamplingRate = []; end
    if nargin < 4
        if isempty(SamplingRate)
            [~, ~, ~, ~, ~, ~, SamplingRate]  = ReadSensorDataFile([], 0, [], [], [], []);
        end
    end
    disp('----------------------------------------------------------------------------')      
    disp('Cleaning up to keep sensors data points that have camera exposure...in Progress')

%% =========== 2. Loop through all datapoints of Sensor Data
    for ii = 1:size(SensorData,1)                
        CurrentDataPointExposure = SensorData(ii,4);                         % Last column (4th Column) is camera exposure signal
        if CurrentDataPointExposure < CameraExposureCutoffLow
            if CleanSensorDataPointAppended == true                         % Ask if data has been pushed out already CleanSensorDataPoint?
                CurrentDataPoint = [] ;                                     % Reset the current data point between pulses
%                 Prompt = sprintf('Exposure ON at data point %d ',CurrentPulseIndexInFile);
%                 disp(Prompt);
                CurrentDataPointAVG(1,1) = CurrentPulseIndexInFile;         % Corrected the index reading and made sure it starts from index 0 by fixing ReadSensorDataFile on 1/24/2018.
                CleanSensorDataTmp = [CleanSensorDataTmp; CurrentDataPointAVG];
                CleanSensorDataPointAppended = false ;                      % Reset to indicate the value was pushed through and other variables
            end
        %-------------------------
        elseif CurrentDataPointExposure > CameraExposureCutoffHigh                    
            if CleanSensorDataPointAppended == false                        % Ask if this is the first datapoint of the pulse. Store its index and reading so that it will be recorrected once done               
                CurrentPulseIndexInFile = SensorData(ii,1); 
                ExposurePulseCount = ExposurePulseCount + 1;                                % Increment the Exposure Pulse Count
                if FirstExposurePulseDatapointNumber == 0
                    FirstExposurePulseDatapointNumber = ii;
                    fprintf('First Exposure Pulse data point number = %d\n', ii);
                end
            end     
            CurrentDataPoint = [CurrentDataPoint;SensorData(ii,:)];          % Append the current pulse datapoints together
            CurrentDataPointAVG = mean(CurrentDataPoint) ;                  % Average them out so that they be as a single point. These data points are what actually happens during exposure. Not very efficient since you average everytime this line runs instead of at the end
                                %CurrentDataPointAVG(i,1) = PulseSampleIndex
            CleanSensorDataPointAppended = true;                            % To let loop know Data was appended   
        %-------------------------
        else                                                                % Exposure signal is between 0.1V and 3V. Either weird signal or transient signal
            %Prompt = sprintf('Weird or transient Camera Exposure Signal at data point #%d. Ignore it',SensorData(i,1));
            %disp(Prompt);
        end   % End of if statemnets
    end   % End of for loop
%% =========== 
    CleanedSensorData = CleanSensorDataTmp(1:EveryNthFrame:size(CleanSensorDataTmp,1),:);  
    
 %% ===========     
    if ~exist('SensorDataFullFilename', 'var'), SensorDataFullFilename = []; end
    if ~isempty(SensorDataFullFilename) 
        [SensorDataPathName, SensorDataFileName, ~] = fileparts(SensorDataFullFilename);
        CleanedSensorDataFullFileNameDAT = fullfile(SensorDataPathName, [SensorDataFileName, '_Cleaned-up.dat']);
        CleanedSensorDataFullFileNameMAT = fullfile(SensorDataPathName, [SensorDataFileName, '_Cleaned-up.mat']);
        
        save(CleanedSensorDataFullFileNameMAT,'CleanedSensorData' , 'SensorDataColumns', 'ExposurePulseCount', 'EveryNthFrame', 'HeaderData', 'HeaderTitle', 'FirstExposurePulseDatapointNumber', 'SamplingRate', '-v7.3')
        fileID = fopen(CleanedSensorDataFullFileNameDAT, 'wt');
        fprintf(fileID, '"%s"\t"%s"\t"%s"\t"%s"\t"%s"\n', SensorDataColumns{:});  % header
        for ii = 1:size(CleanedSensorData,1)
            fprintf(fileID,'%g\t',CleanedSensorData(ii,:));
            fprintf(fileID,'\n');
        end
        fclose(fileID);
    end
        %,,'delimiter','\t','precision',['%10.',num2str(6),'f'],'-append');
        % writematrix(CleanSensorDataPoints,CompiledDataFileName)                                   % Only Matlab 2019a Verision and higher
    if ~isempty(CleanedSensorDataFullFileNameDAT)
        fprintf('Cleaned-up sensor DAT data file is saved in: \n %s \n' , CleanedSensorDataFullFileNameDAT);
        fprintf('Cleaned-up sensor MAT data file is saved in: \n %s \n' , CleanedSensorDataFullFileNameMAT);                
    end
    disp('------------------------- Cleaning up sensor data points COMPLETE ---------------------------------------------------') 