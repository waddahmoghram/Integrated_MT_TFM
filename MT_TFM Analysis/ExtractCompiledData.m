function [CompiledData, HeaderData, HeaderTitle] = ExtractCompiledData(CompiledDataFullFileName, HeaderLinesCount)

%% Written by Waddah Moghram on 2018-05-08 to compile all the compiled flux data to be merged together
    % Updated on 2019-05-28 
    % run repeatedly to save the output as "CurrentSeparationForce"
    % Rename to the appropriate Variable. Once finished Open "Merge Fluxes" to plot the final result.

    % 1. Opening the *.txt Data File generated by Matlab PlotforceVDisplacement.m
    if ~exist('CompiledDataFullFileName','var'), CompiledDataFullFileName = []; end
    if nargin < 1 || isempty(CompiledDataFullFileName)
        % First parameter does not exist, so default it to something
        [CompiledDataFileName, CompiledDataPathName] = uigetfile('Clean_Compiled_data.dat','Select the Compiled Data File');
        CompiledDataFullFileName = fullfile(CompiledDataPathName, CompiledDataFileName);
    end 
    disp('Loading compiled data points...in progress')
    CompiledFileID = fopen(CompiledDataFullFileName, 'r');
    disp('Compiled data file opened!');
    
    if nargin <2 || isempty(HeaderLinesCount)
        HeaderLinesCount = 8;                   % Updated 2019-05-28
    end
    
    % 2. Initializing the variables for the Header File. One for the actual data array & the second for the corresponding titles as cells
    HeaderData = [];
    HeaderTitle = {};
    
    % 3. Header for this file is only one line
    

 
    %% 4. Reading the Header of Data File. This code will read one line at a time with
    % Note: fgetl() reads lines one at a time in the line.
    % Reading each line and the subsequent line
    for i=1:HeaderLinesCount      
        HeaderTitle{i} = strsplit(fgetl(CompiledFileID),'\t');                                  % Store the Header Titles Just In Case
        HeaderData = [HeaderData ; sscanf(fgetl(CompiledFileID) , '%f\t%f\t%f\t%f\t%f\n')'];    % Appending the Header Data
    end
    
    %% 5. Reading the Sensor Data from the 9th row until the end of file into a matrix via dlmread()
    % Modified on 1/18/2018 to allow the flexbility based on headerline count
    % 2 * HeaderLinesCount + 1; 2 rows for each header line + one data header row, but starts at index 0. Corrected on 1/24/2018 -WIM
    CompiledData = dlmread(CompiledDataFullFileName, '\t', (2 * HeaderLinesCount) + 1 , 0);
    
        
    %% 6. Closing the File
    fclose(CompiledFileID);
    disp('Compiled data file closed.');
    disp('Loading compiled data points COMPLETE!')
    
    %% 7. Extracting Flux Status. 20th column of compiled file
    
    FluxON = logical(CompiledData(:,21) == 1);
    FluxOFF = logical(CompiledData(:,21) == 0);
    
     %% 20.5 Plotting the flux against force in the compiled file together. Added on 4/29/2018 to see how Flux & Force are meshing up
     
     CompiledDataSize = size(CompiledData,1);
     FluxSetPoint = input('What is the flux setpoint?\n ');
     RunNumber = input('What is the Run number?\n ');
     
     CurrentSeparationForce = [CompiledData(FluxON,8),CompiledData(FluxON,19)];
     
     % For later. work with fields
     %SeparationForce.(FluxSetPoint).(RunNumber) = [CompiledData(FluxON,8),CompiledData(FluxON,19)]
     
     % 20.2.2. Try to see what happens with Flux ON
     figure()               %Open another figure
     plot(CompiledData(FluxON,8),CompiledData(FluxON,19), 'r.');
     xlabel('Distance (micron)'); ylabel('Force (nN)');
     Caption2 = sprintf('Calibration Curve with Flux ON %d Gs Run %d - Drift Excluded', FluxSetPoint, RunNumber);     
     title(Caption2);
     
end
     
     
     % Plotting the flux
%      plot(1:CompiledDataSize,CompiledData(1:CompiledDataSize,2),'.-','MarkerSize',12)
%      hold on
%      % Plott Force
%      plot(1:CompiledDataSize,CompiledData(1:CompiledDataSize,13),'.-','MarkerSize',12); xlabel('Frame #');ylabel('Force (nN)/Flux (Gs)');
%      legend('Flux', 'Force')
%      PlotTitle = sprintf('%s %.0f Gs', FluxSignalShiftPrompt, FluxSetPoint);
%      title(PlotTitle)
%      ylim([-.2,2.6])